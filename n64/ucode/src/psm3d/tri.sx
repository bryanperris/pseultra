/*
 * pseultra/n64/ucode/src/psm3d/tri.sx
 * PSM3D microcode Tri functions
 * 
 * (C) pseudophpt 2018
 */

//////////////////////////////////////////////////////////////////////////////
//                                                                          // 
// Tri                                                                      // 
//                                                                          // 
// Draws a triangle primitive                                               // 
//                                                                          // 
// FORMAT:                                                                  // 
//                                                                          // 
// 07 XX YY ZZ -- -- -- --                                                  // 
//                                                                          // 
// X: First vertex index                                                    // 
// Y: Second vertex index                                                   // 
// Z: Third vertex index                                                    // 
//                                                                          // 
//////////////////////////////////////////////////////////////////////////////

.global OPTri

// TODO: Separate tri coefficient calculations in diff files
// vc16-vc17 make up Vtx1 (High), vc18-vc19 make up Vtx2 (Mid), vc20-vc21 make up Vtx3 (Low)
// Register format: | X | Y | Z | B | R | G | S | T |

// There has to be a way to improve this, it's so fucking long.
// Maybe improve sorting code, then perform the calculation cyclically?

OPTri:
    vor vc17, nullconst, nullconst, f // Make fractional registers
    vor vc19, nullconst, nullconst, f
    vor vc21, nullconst, nullconst, f
    
    // Load vertices and perform culling. ORs and ANDs all clip flags. If the 
    // X or Y or Z AND results are 1, cull. If Z OR results are 1, cull.

    lb r16, (%lo(cmd) + 1)($zero) // Get vertex cache offset
    sll r16, 4 
    lh r17, (%lo(vtx_cache) + 2)(r16) // Get y coordinate
    lb r20, (%lo(vtx_cache) + 9)(r16) // Get clip flags
    or r21, r20, r0 // Duplicate for OR

        lqv vc16, 0, vtx_cache, r16 // Load vertex

    lb r16, (%lo(cmd) + 2)($zero) // Get vertex cache offset
    sll r16, 4 
    lh r18, (%lo(vtx_cache) + 2)(r16) // Get y coordinate
    lb r22, (%lo(vtx_cache) + 9)(r16) // Get clip flags
    and r20, r22 // Perform OR and AND
    or r21, r22

        lqv vc18, 0, vtx_cache, r16 // Load vertex

    lb r16, (%lo(cmd) + 3)($zero) // Get vertex cache offset
    sll r16, 4 
    lh r19, (%lo(vtx_cache) + 2)(r16) // Get y coordinate
    lb r22, (%lo(vtx_cache) + 9)(r16) // Get clip flags
    and r20, r22 // Perform OR and AND
    or r21, r22

        lqv vc20, 0, vtx_cache, r16 // Load vertex

    bnez r20, .Clip // Cull if all vertices are outside clip bounds
    andi r21, 0x04 // Only care about Z for OR
    bnez r21, .Clip // Cull if any vertex outside Z clip bounds
    
    ori r21, $zero, 0x08 // Triangle command
    ori r22, $zero, %lo(cmd) // Command pointer
    b .NoClip
    ori r23, $zero, 0x20 // Command length

.Clip:
    op_ret // Return if triangle culled
    nop

.NoClip:
    vmov vc17, 2, vc16, e3 // Load z frac
    vmov vc19, 2, vc18, e3 
    vmov vc21, 2, vc20, e3 

    vsubc vc9, vc17, vc21, f // Calculate v3-v1
    vsub vc8, vc16, vc20, f
        
    vsubc vc11, vc19, vc17, f // Calculate v2-v1
    vsub vc10, vc18, vc16, f

    ori r24, r0, 0 // Don't divide by -z

    jal CrossProduct
    nop

        ssv vc12, 10, cmd + 0x8, $zero // Store z int in XL temporarily to get winding
    
    lh r25, (%lo(cmd) + 0x8)($zero)
    xor r24, r25 // XOR z int with parity
    andi r24, 0x8000 // Just get short sign bit
    beq r24, r0, .PosWinding // Check if winding is positive
    nop

.NegWinding:
    andi r24, rsp_mode, PSM3D_MODE_CLOCK_CULL
    beq r24, r0, .NoCull
    nop
    op_ret

.PosWinding:
    andi r24, rsp_mode, PSM3D_MODE_COUNTER_CULL
    beq r24, r0, .NoCull
    nop
    op_ret
    nop

.NoCull:
       
    /*
     * Register 24 will hold the switch parity. Since the cross product is 
     * performed on sorted vectors, we keep track of the parity of the
     * swaps; an odd number negates the clockwise/counterclockwise order,
     * while an even maintains it. This is required so the cross product
     * calculation doesnt need to be repeated. 0 = even, 0x8000 = odd
     */
    ori r24, r0, 0 

    bge r19, r17, .NoSwapXZ // if (x > z) swap(x, z)
    nop

    xori r24, 0x8000 // Swap parity update

        vor vc22, nullconst, vc16, f // Swap X and Z
    
    or r20, $zero, r17 // disgosten

        vor vc16, nullconst, vc20, f 
        
    or r17, $zero, r19
    
        vor vc20, nullconst, vc22, f 

    or r19, $zero, r20

.NoSwapXZ:

    bge r18, r17, .NoSwapXY // if (x > y) swap(x, y)
    nop
    
    xori r24, 0x8000 // Swap parity update
    
        vor vc22, nullconst, vc16, f // Swap X and Y

    or r20, $zero, r17

        vor vc16, nullconst, vc18, f 
        
    or r17, $zero, r18
    
        vor vc18, nullconst, vc22, f 

    or r18, $zero, r20

.NoSwapXY:
    
    bge r19, r18, .NoSwapYZ // if (y > z) swap(y, z)
    nop
    
    xori r24, 0x8000 // Swap parity update
    
        vor vc22, nullconst, vc20, f // Swap Y and Z

    or r20, $zero, r18

        vor vc20, nullconst, vc18, f 
        
    or r18, $zero, r19

        vor vc18, nullconst, vc22, f 

    or r19, $zero, r20

.NoSwapYZ:
        vmov vc17, 2, vc16, e3 // Load z frac
        vmov vc19, 2, vc18, e3 
        vmov vc21, 2, vc20, e3 

        ssv vc18, 0, cmd + 0x8, $zero // Store XL, int
        ssv nullconst, 0, cmd + 0xa, $zero // Store XL, frac
        
        ssv vc16, 0, 0x10, cmd_addr // Store XH, int
        ssv nullconst, 0, 0x12, cmd_addr // Store XH, frac
        
        ssv vc16, 0, 0x18, cmd_addr // Store XM, int
        ssv nullconst, 0, 0x1a, cmd_addr // Store XM, frac

        vsub vc22, vc20, vc18, f
        
    jal CalcTriDxDy // Calculate DxLDy
    nop

        ssv vc26, 0, 0xc, cmd_addr // Store int
        ssv vc27, 0, 0xe, cmd_addr // Store frac

        vsub vc22, vc20, vc16, f

    jal CalcTriDxDy // Calculate DxHDy
    nop

        ssv vc26, 0, 0x14, cmd_addr // Store int
        ssv vc27, 0, 0x16, cmd_addr // Store frac

        vsub vc22, vc18, vc16, f
        
    jal CalcTriDxDy // Calculate DxMDy
    nop

        ssv vc26, 0, 0x1c, cmd_addr // Store int
        ssv vc27, 0, 0x1e, cmd_addr // Store frac

        // TODO: Make it 1 operation

        vmov vc26, 0, vc16, e1 // Load Y coordinates into one vector
        vmov vc26, 1, vc18, e1 
        vmov vc26, 2, vc20, e1 

        vmudh vc26, vc26, v2nconst, v2n_4

        vadd vc27, nullconst, v2nconst2, v2n2_16384 // vc27 = 0x3FFF
        vsub vc27, vc27, v2nconst, v2n_1

        vand vc26, vc26, vc27, f // Mask y coords

        ssv vc26, 0, cmd + 0x6, $zero // Store y coords
        ssv vc26, 2, cmd + 0x4, $zero
        ssv vc26, 4, cmd + 0x2, $zero

    addiu r22, 0x20 // Add to command pointer     

    andi r24, rsp_mode, PSM3D_MODE_TEXTURING | PSM3D_MODE_ZBUF // Texturing and z buffer triangles use z coefficients
    beq r24, r0, .NoCalcZ
    nop

// Calculates DzDe, DzDx, DzDy in format of z coeffs
.CalcZ:
        // The z-buffer code has to calculate dz/dx and dz/dy. This is done by
        // performing a cross product of the two edges (v2-v1) and (v3-v1) to
        // obtain a normal vector <a, b, c>, converting that to a plane 
        // equation, and then taking the partial derivatives -a/c and -b/c 
        // respectively.

        vsubc vc9, vc17, vc21, f // Calculate v3-v1
        vsub vc8, vc16, vc20, f
        
        vsubc vc11, vc19, vc17, f // Calculate v2-v1
        vsub vc10, vc18, vc16, f
        
        ori r24, r0, 1 // Divide by -z

    jal CrossProduct
    nop
        
        vmov vc30, 2, vc12, e1 // Store DzDx
        vmov vc30, 3, vc13, e1
        
        vmov vc30, 6, vc12, e3 // Store DzDy
        vmov vc30, 7, vc13, e3

        vmov vc30, 0, vc16, e2
        vmov vc30, 1, vc17, e2

        vsubc vc23, vc17, vc21, f // Calculate v3-v1
        vsub vc22, vc16, vc20, f
        
        vrcph vc24, 1, vc22, 1 // Get 1/(y3-y1) 
        vrcpl vc25, 1, vc23, 1
        vrcph vc24, 1, nullconst, 0
        
        vmudn vc25, vc25, v2nconst, v2n_2 // Shift left 1 for correct point position 
        vmadh vc24, vc24, v2nconst, v2n_2        
        vmadn vc25, nullconst, nullconst, f 
        
        vmudl vc26, vc23, vc25, e1 // Calculate DzDe = (z3-z1)/(y3-y1)
        vmadm vc26, vc22, vc25, e1
        vmadn vc27, vc23, vc24, e1
        vmadh vc26, vc22, vc24, e1

        vmov vc30, 4, vc26, e2
        vmov vc30, 5, vc27, e2

.NoCalcZ:

    andi r24, rsp_mode, PSM3D_MODE_SHADE
    beq r24, r0, .NoShade
    nop

.Shade:

    ori r21, 0x4 // Z-Buffering command

    addiu r23, 0x40 // Command size

        // We must unpack the shade color for each vertex

        slv vc16, 8, 0, r22 // Store vertex formatted Blue/flags/red/green
        slv vc18, 8, 4, r22 
        luv vc22, 0, 0, r22 // Load bytes
        vmudm vc22, vc22, v2nconst2, v2n2_512 // Shift right 7 to get correct color

        vmov vc16, 3, vc22, e0 // Store vtx0
        vmov vc16, 4, vc22, e2 
        vmov vc16, 5, vc22, e3 
        
        vmov vc18, 3, vc22, e4 // Store vtx1
        vmov vc18, 4, vc22, e6 
        vmov vc18, 5, vc22, e7 
        
        slv vc20, 8, 0, r22 // Store vertex formatted Blue/flags/red/green
        luv vc22, 0, 0, r22 // Load bytes
        vmudm vc22, vc22, v2nconst2, v2n2_512 // Shift right 7 to get correct color

        vmov vc20, 3, vc22, e0 // Store vtx2
        vmov vc20, 4, vc22, e2 
        vmov vc20, 5, vc22, e3 

        slv vc16, 8, 0, r22 // Store r, g int 
        ssv vc16, 6, 4, r22 // Store b int 
        ssv v2nconst, v2n_128 * 2, 6, r22 // Store a int (256)

        sdv nullconst, 0, 8, r22 // Store rgba frac (0)

        sqv nullconst, 0, 16, r22 // Store rgba frac (0)
        sqv nullconst, 0, 32, r22 // Store rgba frac (0)
        sqv nullconst, 0, 48, r22 // Store rgba frac (0)
        
    // Possibly combinable? This is such a mess at this point I need to get my registers straight

        vsubc vc9, vc17, vc21, f // Calculate v3-v1
        vsub vc8, vc16, vc20, f
        
        vrcph vc24, 1, vc8, 1 // Get 1/(y3-y1) 
        vrcpl vc25, 1, vc9, 1
        vrcph vc24, 1, nullconst, 0
        
        vmudn vc25, vc25, v2nconst, v2n_2 // Shift left 1 for correct point position 
        vmadh vc24, vc24, v2nconst, v2n_2        
        vmadn vc25, nullconst, nullconst, f 
        
        vmudl vc26, vc9, vc25, e1 // Calculate DrgbDe = (c3-c1)/(y3-y1)
        vmadm vc26, vc8, vc25, e1
        vmadn vc27, vc9, vc24, e1
        vmadh vc26, vc8, vc24, e1
        
        slv vc26, 8, 0x20, r22 // Store Dr/gDe
        slv vc27, 8, 0x30, r22
        
        ssv vc26, 6, 0x24, r22 // Store DbDe
        ssv vc27, 6, 0x34, r22

        vsubc vc9, vc17, vc21, f // Calculate v1-v3
        vsub vc8, vc16, vc20, f
        
        vsubc vc11, vc19, vc17, f // Calculate v2-v1
        vsub vc10, vc18, vc16, f 
        
        vmov vc9, 2, vc9, e4  // Move r into z 
        vmov vc8, 2, vc8, e4 
        
        vmov vc11, 2, vc11, e4 
        vmov vc10, 2, vc10, e4 

        ori r24, r0, 1 // Divide by -z(-s/-t)

    jal CrossProduct
    nop
        
        ssv vc12, 2, 0x08, r22 // Store DrDx
        ssv vc13, 2, 0x18, r22
        
        ssv vc12, 6, 0x28, r22 // Store DrDy
        ssv vc13, 6, 0x38, r22

        vmov vc9, 2, vc9, e5  // Move g into z 
        vmov vc8, 2, vc8, e5 
        
        vmov vc11, 2, vc11, e5 
        vmov vc10, 2, vc10, e5 

        ori r24, r0, 1 // Divide by -z(-s/-t)

    jal CrossProduct
    nop
        
        ssv vc12, 2, 0x0A, r22 // Store DgDx
        ssv vc13, 2, 0x1A, r22
        
        ssv vc12, 6, 0x2A, r22 // Store DgDy
        ssv vc13, 6, 0x3A, r22
        
        vmov vc9, 2, vc9, e3  // Move b into z 
        vmov vc8, 2, vc8, e3 
        
        vmov vc11, 2, vc11, e3 
        vmov vc10, 2, vc10, e3

        ori r24, r0, 1 // Divide by -z(-s/-t)

    jal CrossProduct
    nop
        
        ssv vc12, 2, 0x0C, r22 // Store DbDx
        ssv vc13, 2, 0x1C, r22
        
        ssv vc12, 6, 0x2C, r22 // Store DbDy
        ssv vc13, 6, 0x3C, r22
 
    addiu r22, 0x40 // Add to command pointer

.NoShade:
    
    andi r24, rsp_mode, PSM3D_MODE_TEXTURING
    beq r24, r0, .NoTex
    nop

.Tex:
    ori r21, 0x2 // Texturing command

    addiu r23, 0x40

        slv vc16, 12, 0, r22 // Store s, t int
        slv nullconst, 0, 0x10, r22 // Store s, t frac (0)

        vsubc vc9, vc17, vc21, f // Calculate v3-v1
        vsub vc8, vc16, vc20, f
        
        vrcph vc24, 1, vc8, 1 // Get 1/(y3-y1) 
        vrcpl vc25, 1, vc9, 1
        vrcph vc24, 1, nullconst, 0
        
        vmudn vc25, vc25, v2nconst, v2n_2 // Shift left 1 for correct point position 
        vmadh vc24, vc24, v2nconst, v2n_2        
        vmadn vc25, nullconst, nullconst, f 
        
        vmudl vc26, vc9, vc25, e1 // Calculate Ds/tDe = (t3-t1)/(y3-y1)
        vmadm vc26, vc8, vc25, e1
        vmadn vc27, vc9, vc24, e1
        vmadh vc26, vc8, vc24, e1
        
        slv vc26, 12, 0x20, r22 // Store
        slv vc27, 12, 0x30, r22 
        
        vsubc vc9, vc17, vc21, f // Calculate v1-v3
        vsub vc8, vc16, vc20, f
        
        vsubc vc11, vc19, vc17, f // Calculate v2-v1
        vsub vc10, vc18, vc16, f 
        
        vmudm vc8, vc8, v2nconst2, v2n2_256 // >> 8
        vmadn vc9, nullconst, nullconst, f
        
        vmudm vc10, vc10, v2nconst2, v2n2_256 // >> 8
        vmadn vc11, nullconst, nullconst, f
        
        vmov vc9, 2, vc9, e6  // Move s into z 
        vmov vc8, 2, vc8, e6 
        
        vmov vc11, 2, vc11, e6 
        vmov vc10, 2, vc10, e6 

        ori r24, r0, 1 // Divide by -z(-s/-t)

    jal CrossProduct
    nop
        
        ssv vc12, 2, 0x08, r22 // Store DsDx
        ssv vc13, 2, 0x18, r22
        
        ssv vc12, 6, 0x28, r22 // Store DsDy
        ssv vc13, 6, 0x38, r22
    
        vmov vc9, 2, vc9, e7 // Move t into z 
        vmov vc8, 2, vc8, e7
        
        vmov vc11, 2, vc11, e7 
        vmov vc10, 2, vc10, e7 

    jal CrossProduct
    nop
        
        ssv vc12, 2, 0x0A, r22 // Store DtDx
        ssv vc13, 2, 0x1A, r22
        
        ssv vc12, 6, 0x2A, r22 // Store DtDy
        ssv vc13, 6, 0x3A, r22
      
        ssv vc30, 0, 0x04, r22
        ssv vc30, 1, 0x14, r22
        ssv vc30, 2, 0x0C, r22
        ssv vc30, 3, 0x1C, r22
        ssv vc30, 4, 0x24, r22
        ssv vc30, 5, 0x34, r22
        ssv vc30, 6, 0x2C, r22
        ssv vc30, 7, 0x3C, r22
    
    addiu r22, 0x40 // Add to command pointer

.NoTex:
    andi r24, rsp_mode, PSM3D_MODE_ZBUF
    beq r24, r0, .NoZBuffer
    nop

.ZBuffer:
    ori r21, 0x1 // Z-Buffering command

    addiu r23, 0x10 // Command size

        sqv vc30, 0, 0, r22 // Store calculated Z coeffs        

    addiu r22, 0x10 // Add to command pointer

.NoZBuffer:
        lw r17, (%lo(cmd) + 0x14)($zero) // Load DxHDy
        lw r18, (%lo(cmd) + 0x1c)($zero) // Load DxMDy

        bge r17, r18, .LeftMajor 
        ori r16, $zero, 0

.RightMajor:
    ori r16, $zero, 0x80

.LeftMajor:
    sb r16, (%lo(cmd) + 1)($zero)

    sb r21, (%lo(cmd))($zero) // Store triangle command
   
    ori r24, $zero, %lo(cmd) // Push command
    jal XBUSPush
    move r25, r23 // Get length

    op_ret // Return operation
    nop

// Little subroutine to calculate Dx/Dy

CalcTriDxDy:
        vrcph vc24, 1, vc22, 1
        vrcpl vc25, 1, nullconst, 1 // Calculate 1 / dy (dx stays in this register)
        vrcph vc24, 1, nullconst, 0 

        vmudn vc29, vc25, v2nconst, v2n_2 // Shift left 1 for correct point position 
        vmadh vc28, vc24, v2nconst, v2n_2        
        vmadn vc29, nullconst, nullconst, f 

        vmudm vc26, vc22, vc29, h1 // Calculate DxLDy
        vmadh vc26, vc22, vc28, h1 
        vmadn vc27, nullconst, nullconst, f

    jr $ra
    nop
